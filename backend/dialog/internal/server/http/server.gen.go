// Package internalhttp provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package internalhttp

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	. "github.com/olga-larina/otus-highload/dialog/internal/model"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /dialog/{user_id}/list)
	GetDialogUserIdList(w http.ResponseWriter, r *http.Request, userId UserId)

	// (POST /dialog/{user_id}/send)
	PostDialogUserIdSend(w http.ResponseWriter, r *http.Request, userId UserId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetDialogUserIdList operation middleware
func (siw *ServerInterfaceWrapper) GetDialogUserIdList(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", mux.Vars(r)["user_id"], &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDialogUserIdList(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostDialogUserIdSend operation middleware
func (siw *ServerInterfaceWrapper) PostDialogUserIdSend(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", mux.Vars(r)["user_id"], &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostDialogUserIdSend(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/dialog/{user_id}/list", wrapper.GetDialogUserIdList).Methods("GET")

	r.HandleFunc(options.BaseURL+"/dialog/{user_id}/send", wrapper.PostDialogUserIdSend).Methods("POST")

	return r
}

type N400Response struct {
}

type N401Response struct {
}

type N5xxResponseHeaders struct {
	RetryAfter int
}
type N5xxJSONResponse struct {
	Body struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}

	Headers N5xxResponseHeaders
}

type GetDialogUserIdListRequestObject struct {
	UserId UserId `json:"user_id"`
}

type GetDialogUserIdListResponseObject interface {
	VisitGetDialogUserIdListResponse(w http.ResponseWriter) error
}

type GetDialogUserIdList200JSONResponse []DialogMessage

func (response GetDialogUserIdList200JSONResponse) VisitGetDialogUserIdListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDialogUserIdList400Response = N400Response

func (response GetDialogUserIdList400Response) VisitGetDialogUserIdListResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetDialogUserIdList401Response = N401Response

func (response GetDialogUserIdList401Response) VisitGetDialogUserIdListResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetDialogUserIdList500JSONResponse struct{ N5xxJSONResponse }

func (response GetDialogUserIdList500JSONResponse) VisitGetDialogUserIdListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDialogUserIdList503ResponseHeaders struct {
	RetryAfter int
}

type GetDialogUserIdList503JSONResponse struct {
	Body struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	Headers GetDialogUserIdList503ResponseHeaders
}

func (response GetDialogUserIdList503JSONResponse) VisitGetDialogUserIdListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostDialogUserIdSendRequestObject struct {
	UserId UserId `json:"user_id"`
	Body   *PostDialogUserIdSendJSONRequestBody
}

type PostDialogUserIdSendResponseObject interface {
	VisitPostDialogUserIdSendResponse(w http.ResponseWriter) error
}

type PostDialogUserIdSend200Response struct {
}

func (response PostDialogUserIdSend200Response) VisitPostDialogUserIdSendResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostDialogUserIdSend400Response = N400Response

func (response PostDialogUserIdSend400Response) VisitPostDialogUserIdSendResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostDialogUserIdSend401Response = N401Response

func (response PostDialogUserIdSend401Response) VisitPostDialogUserIdSendResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostDialogUserIdSend404Response struct {
}

func (response PostDialogUserIdSend404Response) VisitPostDialogUserIdSendResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostDialogUserIdSend500JSONResponse struct{ N5xxJSONResponse }

func (response PostDialogUserIdSend500JSONResponse) VisitPostDialogUserIdSendResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostDialogUserIdSend503ResponseHeaders struct {
	RetryAfter int
}

type PostDialogUserIdSend503JSONResponse struct {
	Body struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	Headers PostDialogUserIdSend503ResponseHeaders
}

func (response PostDialogUserIdSend503JSONResponse) VisitPostDialogUserIdSendResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /dialog/{user_id}/list)
	GetDialogUserIdList(ctx context.Context, request GetDialogUserIdListRequestObject) (GetDialogUserIdListResponseObject, error)

	// (POST /dialog/{user_id}/send)
	PostDialogUserIdSend(ctx context.Context, request PostDialogUserIdSendRequestObject) (PostDialogUserIdSendResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetDialogUserIdList operation middleware
func (sh *strictHandler) GetDialogUserIdList(w http.ResponseWriter, r *http.Request, userId UserId) {
	var request GetDialogUserIdListRequestObject

	request.UserId = userId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDialogUserIdList(ctx, request.(GetDialogUserIdListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDialogUserIdList")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDialogUserIdListResponseObject); ok {
		if err := validResponse.VisitGetDialogUserIdListResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostDialogUserIdSend operation middleware
func (sh *strictHandler) PostDialogUserIdSend(w http.ResponseWriter, r *http.Request, userId UserId) {
	var request PostDialogUserIdSendRequestObject

	request.UserId = userId

	var body PostDialogUserIdSendJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostDialogUserIdSend(ctx, request.(PostDialogUserIdSendRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostDialogUserIdSend")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostDialogUserIdSendResponseObject); ok {
		if err := validResponse.VisitPostDialogUserIdSendResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RW0W7jVBD9FevCo0nS3fKSF1SEBEggEN19qqqVN75N7iqxzfUtalVFahIEi1ppEeIB",
	"IcFK8ANutt56k8b5hXP/CM04aZPGYbMg2Jc4TsbnnplzZsYnohF2ojCQgYlF/URoGUdhEEu+2a7V6OLL",
	"uKFVZFQYiLrAb0gxRIIxMlxiYs+QOrhEgsn8ZoghcvpJdF2xXdtaA5JgaPvI7SkyXCFn0ALjFQHmtmf7",
	"doApobx/dEQojTAwMjD01Yuitmp4BFh9EhPqiYgbLdnx6Fukw0hqo4pEGqEvS0j8Siwd5PYpMlxghKzi",
	"4Lk9RUqJIcEVfdrvkWJCjMb2mYMRxkhsz/aQ2W+RYYTEfocMmYOpPUWOC4yR4tqhXy6Q813q4MKecUIU",
	"8gK5Q8fYpwSNjHCXHq4IV5jjSIq6UIGRTampCB0Zx16zLJPfMUVme1zAjE5byOkWKjZaBU1C0vLrQxmb",
	"R8ovAfsFl0TL9hcyZJ0cXCEpiNJZGxTrb/LHFDlzHiFZn/2c8oyz0tIX9b2bSuzfBIaPn8iGEV2KvFuc",
	"m1okju0htacY8mciXNGSni81u+QrafTxezsHRuqSqvzEqV7bZ65DSfLdFdkhn5k4pyxT+wNS0jahPyd2",
	"gJeYkNo9LipZp2/Plwop3AXf3hW9ywkV/zPJj5TXDpuf3zph2ekHOuzQ9V0tD0RdvFO9be/qDKX6MJb6",
	"U59sYOSReV300oEP6AF6MNz0kDvCMT9+fnb6qoKuWD1yVY4/kGJEhqLS5uQdqnzRTMIV8sjrRG2CZY9m",
	"rHjfJb0SjJy5GB+UNceM+hs1Bpl5bM/nc8z2CZ+ZrBo5lo1DrczxLpWqkO2x9LTUO4emVXLsj0tzkqcN",
	"DwyyVR85Rkxq4C6YsZihF/YM4zm3wbw1hw6uqRg8olOn2g6bKpibkKgWZG6pt4yJisZSwQELb5Th2n7x",
	"4OGu84lqttqh5zs7utFShjR0xTdSxwX9rcq9So3KGkYy8CIl6uJ+pVapCVdEnmlx+lWfFa+eHMZSP1J+",
	"t9pWMavelHwhi/OoJ13Ex9IUFimU+oxiCU17HWm4mfdOhKLD6QThisDjxGboYtGSRh/KxQbcyNP77vKi",
	"vFcsyo23kzKyE79R43HTFXJ4WnvHpYPuZ2S8l3O8YI3xEpd2QGYf2gGNrrU+xTWyYlnX1tG6SbhKQbeL",
	"/XWxW7y+N8GlHc+x9zeMXegllnyxi/b2u/sUsGqtWAbc3FEYl3jryzBeMtcuRf//5uL1/GHoH/+Lt55/",
	"ON3vTOw1U7pbxK02wR1P/ml7mPKbDq1Bnk9TXo9D3vWz3bg0wJH+l1bcrm2X0Hxe2hfnDia01en15lUx",
	"/N+mm7vdvwIAAP//wb7poa8LAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
