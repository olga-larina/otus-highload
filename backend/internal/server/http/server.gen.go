// Package internalhttp provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package internalhttp

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	. "github.com/olga-larina/otus-highload/backend/internal/model"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /dialog/{user_id}/list)
	GetDialogUserIdList(w http.ResponseWriter, r *http.Request, userId UserId)

	// (POST /dialog/{user_id}/send)
	PostDialogUserIdSend(w http.ResponseWriter, r *http.Request, userId UserId)

	// (PUT /friend/delete/{user_id})
	PutFriendDeleteUserId(w http.ResponseWriter, r *http.Request, userId UserId)

	// (PUT /friend/set/{user_id})
	PutFriendSetUserId(w http.ResponseWriter, r *http.Request, userId UserId)

	// (POST /login)
	PostLogin(w http.ResponseWriter, r *http.Request)

	// (POST /post/create)
	PostPostCreate(w http.ResponseWriter, r *http.Request)

	// (PUT /post/delete/{id})
	PutPostDeleteId(w http.ResponseWriter, r *http.Request, id PostId)

	// (GET /post/feed)
	GetPostFeed(w http.ResponseWriter, r *http.Request, params GetPostFeedParams)

	// (GET /post/get/{id})
	GetPostGetId(w http.ResponseWriter, r *http.Request, id PostId)

	// (PUT /post/update)
	PutPostUpdate(w http.ResponseWriter, r *http.Request)

	// (GET /user/get/{id})
	GetUserGetId(w http.ResponseWriter, r *http.Request, id UserId)

	// (GET /user/me)
	GetUserMe(w http.ResponseWriter, r *http.Request)

	// (POST /user/register)
	PostUserRegister(w http.ResponseWriter, r *http.Request)

	// (GET /user/search)
	GetUserSearch(w http.ResponseWriter, r *http.Request, params GetUserSearchParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetDialogUserIdList operation middleware
func (siw *ServerInterfaceWrapper) GetDialogUserIdList(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", mux.Vars(r)["user_id"], &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDialogUserIdList(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostDialogUserIdSend operation middleware
func (siw *ServerInterfaceWrapper) PostDialogUserIdSend(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", mux.Vars(r)["user_id"], &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostDialogUserIdSend(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutFriendDeleteUserId operation middleware
func (siw *ServerInterfaceWrapper) PutFriendDeleteUserId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", mux.Vars(r)["user_id"], &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutFriendDeleteUserId(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutFriendSetUserId operation middleware
func (siw *ServerInterfaceWrapper) PutFriendSetUserId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", mux.Vars(r)["user_id"], &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutFriendSetUserId(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostLogin operation middleware
func (siw *ServerInterfaceWrapper) PostLogin(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostLogin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostPostCreate operation middleware
func (siw *ServerInterfaceWrapper) PostPostCreate(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPostCreate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutPostDeleteId operation middleware
func (siw *ServerInterfaceWrapper) PutPostDeleteId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id PostId

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutPostDeleteId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPostFeed operation middleware
func (siw *ServerInterfaceWrapper) GetPostFeed(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPostFeedParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPostFeed(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPostGetId operation middleware
func (siw *ServerInterfaceWrapper) GetPostGetId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id PostId

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPostGetId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutPostUpdate operation middleware
func (siw *ServerInterfaceWrapper) PutPostUpdate(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutPostUpdate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserGetId operation middleware
func (siw *ServerInterfaceWrapper) GetUserGetId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id UserId

	err = runtime.BindStyledParameterWithOptions("simple", "id", mux.Vars(r)["id"], &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserGetId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserMe operation middleware
func (siw *ServerInterfaceWrapper) GetUserMe(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostUserRegister operation middleware
func (siw *ServerInterfaceWrapper) PostUserRegister(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUserRegister(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserSearch operation middleware
func (siw *ServerInterfaceWrapper) GetUserSearch(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserSearchParams

	// ------------- Required query parameter "first_name" -------------

	if paramValue := r.URL.Query().Get("first_name"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "first_name"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "first_name", r.URL.Query(), &params.FirstName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "first_name", Err: err})
		return
	}

	// ------------- Required query parameter "last_name" -------------

	if paramValue := r.URL.Query().Get("last_name"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "last_name"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "last_name", r.URL.Query(), &params.LastName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "last_name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserSearch(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/dialog/{user_id}/list", wrapper.GetDialogUserIdList).Methods("GET")

	r.HandleFunc(options.BaseURL+"/dialog/{user_id}/send", wrapper.PostDialogUserIdSend).Methods("POST")

	r.HandleFunc(options.BaseURL+"/friend/delete/{user_id}", wrapper.PutFriendDeleteUserId).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/friend/set/{user_id}", wrapper.PutFriendSetUserId).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/login", wrapper.PostLogin).Methods("POST")

	r.HandleFunc(options.BaseURL+"/post/create", wrapper.PostPostCreate).Methods("POST")

	r.HandleFunc(options.BaseURL+"/post/delete/{id}", wrapper.PutPostDeleteId).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/post/feed", wrapper.GetPostFeed).Methods("GET")

	r.HandleFunc(options.BaseURL+"/post/get/{id}", wrapper.GetPostGetId).Methods("GET")

	r.HandleFunc(options.BaseURL+"/post/update", wrapper.PutPostUpdate).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/user/get/{id}", wrapper.GetUserGetId).Methods("GET")

	r.HandleFunc(options.BaseURL+"/user/me", wrapper.GetUserMe).Methods("GET")

	r.HandleFunc(options.BaseURL+"/user/register", wrapper.PostUserRegister).Methods("POST")

	r.HandleFunc(options.BaseURL+"/user/search", wrapper.GetUserSearch).Methods("GET")

	return r
}

type N400Response struct {
}

type N401Response struct {
}

type N5xxResponseHeaders struct {
	RetryAfter int
}
type N5xxJSONResponse struct {
	Body struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}

	Headers N5xxResponseHeaders
}

type GetDialogUserIdListRequestObject struct {
	UserId UserId `json:"user_id"`
}

type GetDialogUserIdListResponseObject interface {
	VisitGetDialogUserIdListResponse(w http.ResponseWriter) error
}

type GetDialogUserIdList200JSONResponse []DialogMessage

func (response GetDialogUserIdList200JSONResponse) VisitGetDialogUserIdListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDialogUserIdList400Response = N400Response

func (response GetDialogUserIdList400Response) VisitGetDialogUserIdListResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetDialogUserIdList401Response = N401Response

func (response GetDialogUserIdList401Response) VisitGetDialogUserIdListResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetDialogUserIdList500JSONResponse struct{ N5xxJSONResponse }

func (response GetDialogUserIdList500JSONResponse) VisitGetDialogUserIdListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDialogUserIdList503ResponseHeaders struct {
	RetryAfter int
}

type GetDialogUserIdList503JSONResponse struct {
	Body struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	Headers GetDialogUserIdList503ResponseHeaders
}

func (response GetDialogUserIdList503JSONResponse) VisitGetDialogUserIdListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostDialogUserIdSendRequestObject struct {
	UserId UserId `json:"user_id"`
	Body   *PostDialogUserIdSendJSONRequestBody
}

type PostDialogUserIdSendResponseObject interface {
	VisitPostDialogUserIdSendResponse(w http.ResponseWriter) error
}

type PostDialogUserIdSend200Response struct {
}

func (response PostDialogUserIdSend200Response) VisitPostDialogUserIdSendResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostDialogUserIdSend400Response = N400Response

func (response PostDialogUserIdSend400Response) VisitPostDialogUserIdSendResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostDialogUserIdSend401Response = N401Response

func (response PostDialogUserIdSend401Response) VisitPostDialogUserIdSendResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostDialogUserIdSend500JSONResponse struct{ N5xxJSONResponse }

func (response PostDialogUserIdSend500JSONResponse) VisitPostDialogUserIdSendResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostDialogUserIdSend503ResponseHeaders struct {
	RetryAfter int
}

type PostDialogUserIdSend503JSONResponse struct {
	Body struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	Headers PostDialogUserIdSend503ResponseHeaders
}

func (response PostDialogUserIdSend503JSONResponse) VisitPostDialogUserIdSendResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response.Body)
}

type PutFriendDeleteUserIdRequestObject struct {
	UserId UserId `json:"user_id"`
}

type PutFriendDeleteUserIdResponseObject interface {
	VisitPutFriendDeleteUserIdResponse(w http.ResponseWriter) error
}

type PutFriendDeleteUserId200Response struct {
}

func (response PutFriendDeleteUserId200Response) VisitPutFriendDeleteUserIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PutFriendDeleteUserId400Response = N400Response

func (response PutFriendDeleteUserId400Response) VisitPutFriendDeleteUserIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PutFriendDeleteUserId401Response = N401Response

func (response PutFriendDeleteUserId401Response) VisitPutFriendDeleteUserIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PutFriendDeleteUserId500JSONResponse struct{ N5xxJSONResponse }

func (response PutFriendDeleteUserId500JSONResponse) VisitPutFriendDeleteUserIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.Body)
}

type PutFriendDeleteUserId503ResponseHeaders struct {
	RetryAfter int
}

type PutFriendDeleteUserId503JSONResponse struct {
	Body struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	Headers PutFriendDeleteUserId503ResponseHeaders
}

func (response PutFriendDeleteUserId503JSONResponse) VisitPutFriendDeleteUserIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response.Body)
}

type PutFriendSetUserIdRequestObject struct {
	UserId UserId `json:"user_id"`
}

type PutFriendSetUserIdResponseObject interface {
	VisitPutFriendSetUserIdResponse(w http.ResponseWriter) error
}

type PutFriendSetUserId200Response struct {
}

func (response PutFriendSetUserId200Response) VisitPutFriendSetUserIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PutFriendSetUserId400Response = N400Response

func (response PutFriendSetUserId400Response) VisitPutFriendSetUserIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PutFriendSetUserId401Response = N401Response

func (response PutFriendSetUserId401Response) VisitPutFriendSetUserIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PutFriendSetUserId500JSONResponse struct{ N5xxJSONResponse }

func (response PutFriendSetUserId500JSONResponse) VisitPutFriendSetUserIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.Body)
}

type PutFriendSetUserId503ResponseHeaders struct {
	RetryAfter int
}

type PutFriendSetUserId503JSONResponse struct {
	Body struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	Headers PutFriendSetUserId503ResponseHeaders
}

func (response PutFriendSetUserId503JSONResponse) VisitPutFriendSetUserIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostLoginRequestObject struct {
	Body *PostLoginJSONRequestBody
}

type PostLoginResponseObject interface {
	VisitPostLoginResponse(w http.ResponseWriter) error
}

type PostLogin200JSONResponse struct {
	Token *string `json:"token,omitempty"`
}

func (response PostLogin200JSONResponse) VisitPostLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostLogin400Response struct {
}

func (response PostLogin400Response) VisitPostLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostLogin404Response struct {
}

func (response PostLogin404Response) VisitPostLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostLogin500JSONResponse struct{ N5xxJSONResponse }

func (response PostLogin500JSONResponse) VisitPostLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostLogin503ResponseHeaders struct {
	RetryAfter int
}

type PostLogin503JSONResponse struct {
	Body struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	Headers PostLogin503ResponseHeaders
}

func (response PostLogin503JSONResponse) VisitPostLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostPostCreateRequestObject struct {
	Body *PostPostCreateJSONRequestBody
}

type PostPostCreateResponseObject interface {
	VisitPostPostCreateResponse(w http.ResponseWriter) error
}

type PostPostCreate200JSONResponse PostId

func (response PostPostCreate200JSONResponse) VisitPostPostCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostPostCreate400Response = N400Response

func (response PostPostCreate400Response) VisitPostPostCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostPostCreate401Response = N401Response

func (response PostPostCreate401Response) VisitPostPostCreateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostPostCreate500JSONResponse struct{ N5xxJSONResponse }

func (response PostPostCreate500JSONResponse) VisitPostPostCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostPostCreate503ResponseHeaders struct {
	RetryAfter int
}

type PostPostCreate503JSONResponse struct {
	Body struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	Headers PostPostCreate503ResponseHeaders
}

func (response PostPostCreate503JSONResponse) VisitPostPostCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response.Body)
}

type PutPostDeleteIdRequestObject struct {
	Id PostId `json:"id"`
}

type PutPostDeleteIdResponseObject interface {
	VisitPutPostDeleteIdResponse(w http.ResponseWriter) error
}

type PutPostDeleteId200Response struct {
}

func (response PutPostDeleteId200Response) VisitPutPostDeleteIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PutPostDeleteId400Response = N400Response

func (response PutPostDeleteId400Response) VisitPutPostDeleteIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PutPostDeleteId401Response = N401Response

func (response PutPostDeleteId401Response) VisitPutPostDeleteIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PutPostDeleteId500JSONResponse struct{ N5xxJSONResponse }

func (response PutPostDeleteId500JSONResponse) VisitPutPostDeleteIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.Body)
}

type PutPostDeleteId503ResponseHeaders struct {
	RetryAfter int
}

type PutPostDeleteId503JSONResponse struct {
	Body struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	Headers PutPostDeleteId503ResponseHeaders
}

func (response PutPostDeleteId503JSONResponse) VisitPutPostDeleteIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetPostFeedRequestObject struct {
	Params GetPostFeedParams
}

type GetPostFeedResponseObject interface {
	VisitGetPostFeedResponse(w http.ResponseWriter) error
}

type GetPostFeed200JSONResponse []Post

func (response GetPostFeed200JSONResponse) VisitGetPostFeedResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPostFeed400Response = N400Response

func (response GetPostFeed400Response) VisitGetPostFeedResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetPostFeed401Response = N401Response

func (response GetPostFeed401Response) VisitGetPostFeedResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetPostFeed500JSONResponse struct{ N5xxJSONResponse }

func (response GetPostFeed500JSONResponse) VisitGetPostFeedResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetPostFeed503ResponseHeaders struct {
	RetryAfter int
}

type GetPostFeed503JSONResponse struct {
	Body struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	Headers GetPostFeed503ResponseHeaders
}

func (response GetPostFeed503JSONResponse) VisitGetPostFeedResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetPostGetIdRequestObject struct {
	Id PostId `json:"id"`
}

type GetPostGetIdResponseObject interface {
	VisitGetPostGetIdResponse(w http.ResponseWriter) error
}

type GetPostGetId200JSONResponse Post

func (response GetPostGetId200JSONResponse) VisitGetPostGetIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPostGetId400Response = N400Response

func (response GetPostGetId400Response) VisitGetPostGetIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetPostGetId401Response = N401Response

func (response GetPostGetId401Response) VisitGetPostGetIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetPostGetId500JSONResponse struct{ N5xxJSONResponse }

func (response GetPostGetId500JSONResponse) VisitGetPostGetIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetPostGetId503ResponseHeaders struct {
	RetryAfter int
}

type GetPostGetId503JSONResponse struct {
	Body struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	Headers GetPostGetId503ResponseHeaders
}

func (response GetPostGetId503JSONResponse) VisitGetPostGetIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response.Body)
}

type PutPostUpdateRequestObject struct {
	Body *PutPostUpdateJSONRequestBody
}

type PutPostUpdateResponseObject interface {
	VisitPutPostUpdateResponse(w http.ResponseWriter) error
}

type PutPostUpdate200Response struct {
}

func (response PutPostUpdate200Response) VisitPutPostUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PutPostUpdate400Response = N400Response

func (response PutPostUpdate400Response) VisitPutPostUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PutPostUpdate401Response = N401Response

func (response PutPostUpdate401Response) VisitPutPostUpdateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PutPostUpdate500JSONResponse struct{ N5xxJSONResponse }

func (response PutPostUpdate500JSONResponse) VisitPutPostUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.Body)
}

type PutPostUpdate503ResponseHeaders struct {
	RetryAfter int
}

type PutPostUpdate503JSONResponse struct {
	Body struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	Headers PutPostUpdate503ResponseHeaders
}

func (response PutPostUpdate503JSONResponse) VisitPutPostUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetUserGetIdRequestObject struct {
	Id UserId `json:"id"`
}

type GetUserGetIdResponseObject interface {
	VisitGetUserGetIdResponse(w http.ResponseWriter) error
}

type GetUserGetId200JSONResponse User

func (response GetUserGetId200JSONResponse) VisitGetUserGetIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserGetId400Response struct {
}

func (response GetUserGetId400Response) VisitGetUserGetIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetUserGetId404Response struct {
}

func (response GetUserGetId404Response) VisitGetUserGetIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetUserGetId500JSONResponse struct{ N5xxJSONResponse }

func (response GetUserGetId500JSONResponse) VisitGetUserGetIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetUserGetId503ResponseHeaders struct {
	RetryAfter int
}

type GetUserGetId503JSONResponse struct {
	Body struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	Headers GetUserGetId503ResponseHeaders
}

func (response GetUserGetId503JSONResponse) VisitGetUserGetIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetUserMeRequestObject struct {
}

type GetUserMeResponseObject interface {
	VisitGetUserMeResponse(w http.ResponseWriter) error
}

type GetUserMe200JSONResponse User

func (response GetUserMe200JSONResponse) VisitGetUserMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserMe400Response struct {
}

func (response GetUserMe400Response) VisitGetUserMeResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetUserMe404Response struct {
}

func (response GetUserMe404Response) VisitGetUserMeResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetUserMe500JSONResponse struct{ N5xxJSONResponse }

func (response GetUserMe500JSONResponse) VisitGetUserMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetUserMe503ResponseHeaders struct {
	RetryAfter int
}

type GetUserMe503JSONResponse struct {
	Body struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	Headers GetUserMe503ResponseHeaders
}

func (response GetUserMe503JSONResponse) VisitGetUserMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostUserRegisterRequestObject struct {
	Body *PostUserRegisterJSONRequestBody
}

type PostUserRegisterResponseObject interface {
	VisitPostUserRegisterResponse(w http.ResponseWriter) error
}

type PostUserRegister200JSONResponse struct {
	UserId *string `json:"user_id,omitempty"`
}

func (response PostUserRegister200JSONResponse) VisitPostUserRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostUserRegister400Response struct {
}

func (response PostUserRegister400Response) VisitPostUserRegisterResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostUserRegister500JSONResponse struct{ N5xxJSONResponse }

func (response PostUserRegister500JSONResponse) VisitPostUserRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostUserRegister503ResponseHeaders struct {
	RetryAfter int
}

type PostUserRegister503JSONResponse struct {
	Body struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	Headers PostUserRegister503ResponseHeaders
}

func (response PostUserRegister503JSONResponse) VisitPostUserRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetUserSearchRequestObject struct {
	Params GetUserSearchParams
}

type GetUserSearchResponseObject interface {
	VisitGetUserSearchResponse(w http.ResponseWriter) error
}

type GetUserSearch200JSONResponse []User

func (response GetUserSearch200JSONResponse) VisitGetUserSearchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserSearch400Response struct {
}

func (response GetUserSearch400Response) VisitGetUserSearchResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type GetUserSearch500JSONResponse struct{ N5xxJSONResponse }

func (response GetUserSearch500JSONResponse) VisitGetUserSearchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetUserSearch503ResponseHeaders struct {
	RetryAfter int
}

type GetUserSearch503JSONResponse struct {
	Body struct {
		// Code Код ошибки. Предназначен для классификации проблем и более быстрого решения проблем.
		Code *int `json:"code,omitempty"`

		// Message Описание ошибки
		Message string `json:"message"`

		// RequestId Идентификатор запроса. Предназначен для более быстрого поиска проблем.
		RequestId *string `json:"request_id,omitempty"`
	}
	Headers GetUserSearch503ResponseHeaders
}

func (response GetUserSearch503JSONResponse) VisitGetUserSearchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /dialog/{user_id}/list)
	GetDialogUserIdList(ctx context.Context, request GetDialogUserIdListRequestObject) (GetDialogUserIdListResponseObject, error)

	// (POST /dialog/{user_id}/send)
	PostDialogUserIdSend(ctx context.Context, request PostDialogUserIdSendRequestObject) (PostDialogUserIdSendResponseObject, error)

	// (PUT /friend/delete/{user_id})
	PutFriendDeleteUserId(ctx context.Context, request PutFriendDeleteUserIdRequestObject) (PutFriendDeleteUserIdResponseObject, error)

	// (PUT /friend/set/{user_id})
	PutFriendSetUserId(ctx context.Context, request PutFriendSetUserIdRequestObject) (PutFriendSetUserIdResponseObject, error)

	// (POST /login)
	PostLogin(ctx context.Context, request PostLoginRequestObject) (PostLoginResponseObject, error)

	// (POST /post/create)
	PostPostCreate(ctx context.Context, request PostPostCreateRequestObject) (PostPostCreateResponseObject, error)

	// (PUT /post/delete/{id})
	PutPostDeleteId(ctx context.Context, request PutPostDeleteIdRequestObject) (PutPostDeleteIdResponseObject, error)

	// (GET /post/feed)
	GetPostFeed(ctx context.Context, request GetPostFeedRequestObject) (GetPostFeedResponseObject, error)

	// (GET /post/get/{id})
	GetPostGetId(ctx context.Context, request GetPostGetIdRequestObject) (GetPostGetIdResponseObject, error)

	// (PUT /post/update)
	PutPostUpdate(ctx context.Context, request PutPostUpdateRequestObject) (PutPostUpdateResponseObject, error)

	// (GET /user/get/{id})
	GetUserGetId(ctx context.Context, request GetUserGetIdRequestObject) (GetUserGetIdResponseObject, error)

	// (GET /user/me)
	GetUserMe(ctx context.Context, request GetUserMeRequestObject) (GetUserMeResponseObject, error)

	// (POST /user/register)
	PostUserRegister(ctx context.Context, request PostUserRegisterRequestObject) (PostUserRegisterResponseObject, error)

	// (GET /user/search)
	GetUserSearch(ctx context.Context, request GetUserSearchRequestObject) (GetUserSearchResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetDialogUserIdList operation middleware
func (sh *strictHandler) GetDialogUserIdList(w http.ResponseWriter, r *http.Request, userId UserId) {
	var request GetDialogUserIdListRequestObject

	request.UserId = userId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDialogUserIdList(ctx, request.(GetDialogUserIdListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDialogUserIdList")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDialogUserIdListResponseObject); ok {
		if err := validResponse.VisitGetDialogUserIdListResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostDialogUserIdSend operation middleware
func (sh *strictHandler) PostDialogUserIdSend(w http.ResponseWriter, r *http.Request, userId UserId) {
	var request PostDialogUserIdSendRequestObject

	request.UserId = userId

	var body PostDialogUserIdSendJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostDialogUserIdSend(ctx, request.(PostDialogUserIdSendRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostDialogUserIdSend")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostDialogUserIdSendResponseObject); ok {
		if err := validResponse.VisitPostDialogUserIdSendResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutFriendDeleteUserId operation middleware
func (sh *strictHandler) PutFriendDeleteUserId(w http.ResponseWriter, r *http.Request, userId UserId) {
	var request PutFriendDeleteUserIdRequestObject

	request.UserId = userId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutFriendDeleteUserId(ctx, request.(PutFriendDeleteUserIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutFriendDeleteUserId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutFriendDeleteUserIdResponseObject); ok {
		if err := validResponse.VisitPutFriendDeleteUserIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutFriendSetUserId operation middleware
func (sh *strictHandler) PutFriendSetUserId(w http.ResponseWriter, r *http.Request, userId UserId) {
	var request PutFriendSetUserIdRequestObject

	request.UserId = userId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutFriendSetUserId(ctx, request.(PutFriendSetUserIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutFriendSetUserId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutFriendSetUserIdResponseObject); ok {
		if err := validResponse.VisitPutFriendSetUserIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostLogin operation middleware
func (sh *strictHandler) PostLogin(w http.ResponseWriter, r *http.Request) {
	var request PostLoginRequestObject

	var body PostLoginJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostLogin(ctx, request.(PostLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostLogin")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostLoginResponseObject); ok {
		if err := validResponse.VisitPostLoginResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostPostCreate operation middleware
func (sh *strictHandler) PostPostCreate(w http.ResponseWriter, r *http.Request) {
	var request PostPostCreateRequestObject

	var body PostPostCreateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostPostCreate(ctx, request.(PostPostCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostPostCreate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostPostCreateResponseObject); ok {
		if err := validResponse.VisitPostPostCreateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutPostDeleteId operation middleware
func (sh *strictHandler) PutPostDeleteId(w http.ResponseWriter, r *http.Request, id PostId) {
	var request PutPostDeleteIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutPostDeleteId(ctx, request.(PutPostDeleteIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutPostDeleteId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutPostDeleteIdResponseObject); ok {
		if err := validResponse.VisitPutPostDeleteIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPostFeed operation middleware
func (sh *strictHandler) GetPostFeed(w http.ResponseWriter, r *http.Request, params GetPostFeedParams) {
	var request GetPostFeedRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPostFeed(ctx, request.(GetPostFeedRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPostFeed")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPostFeedResponseObject); ok {
		if err := validResponse.VisitGetPostFeedResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPostGetId operation middleware
func (sh *strictHandler) GetPostGetId(w http.ResponseWriter, r *http.Request, id PostId) {
	var request GetPostGetIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPostGetId(ctx, request.(GetPostGetIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPostGetId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPostGetIdResponseObject); ok {
		if err := validResponse.VisitGetPostGetIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutPostUpdate operation middleware
func (sh *strictHandler) PutPostUpdate(w http.ResponseWriter, r *http.Request) {
	var request PutPostUpdateRequestObject

	var body PutPostUpdateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutPostUpdate(ctx, request.(PutPostUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutPostUpdate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutPostUpdateResponseObject); ok {
		if err := validResponse.VisitPutPostUpdateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUserGetId operation middleware
func (sh *strictHandler) GetUserGetId(w http.ResponseWriter, r *http.Request, id UserId) {
	var request GetUserGetIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUserGetId(ctx, request.(GetUserGetIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUserGetId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUserGetIdResponseObject); ok {
		if err := validResponse.VisitGetUserGetIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUserMe operation middleware
func (sh *strictHandler) GetUserMe(w http.ResponseWriter, r *http.Request) {
	var request GetUserMeRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUserMe(ctx, request.(GetUserMeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUserMe")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUserMeResponseObject); ok {
		if err := validResponse.VisitGetUserMeResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostUserRegister operation middleware
func (sh *strictHandler) PostUserRegister(w http.ResponseWriter, r *http.Request) {
	var request PostUserRegisterRequestObject

	var body PostUserRegisterJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostUserRegister(ctx, request.(PostUserRegisterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUserRegister")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostUserRegisterResponseObject); ok {
		if err := validResponse.VisitPostUserRegisterResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUserSearch operation middleware
func (sh *strictHandler) GetUserSearch(w http.ResponseWriter, r *http.Request, params GetUserSearchParams) {
	var request GetUserSearchRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUserSearch(ctx, request.(GetUserSearchRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUserSearch")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUserSearchResponseObject); ok {
		if err := validResponse.VisitGetUserSearchResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ryWbX5vnNZv/CQAA//8KkCoyPjEAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
