# Logger config
logger:
  level: "DEBUG"
# HTTP server config
httpServer:
  host: ${HTTP_SERVER_HOST}
  port: ${HTTP_SERVER_PORT}
  readTimeout: "5s"
# Database config
database:
  master: # master
    uri: ${DB_MASTER_URI}
    connect:
      maxConns: ${DB_MASTER_MAX_CONNS}
      maxConnLifetime: "1h"
      maxConnIdleTime: "10m"
  replicas: # replicas, may be absent or uri may be empty
    uri: ${DB_REPLICAS_URI}
    connect:
      maxConns: ${DB_REPLICAS_MAX_CONNS}
      maxConnLifetime: "1h"
      maxConnIdleTime: "10m"
# Timezone
timezone: "Europe/Moscow"
# Auth config
auth:
  PrivateKey: ${AUTH_PRIVATE_KEY}
# Queue config
queue:
  uri: ${QUEUE_URI}
  exchangeName: "backend-events"
  exchangeType: "direct" # direct|fanout|topic|x-custom
  postFeedCacheQueue:
    queueName: "post-feed-cache-queue" # общая очередь для равномерного распределения нагрузки
    routingKey: "post-feed-cache"
    consumerTag: "backend-consumer-%v" # разный тег для каждого экземпляра
  postFeedUserQueue:
    queueName: "post-feed-%v-queue-%v" # очередь для конкретного пользователя и конкретного экземпляра
    routingKey: "post-feed-%v" # роутинг по конкретному пользователю
    consumerTag: "backend-consumer-%v-%v" # разный тег для каждого экземпляра и пользователя
# Saga queue config
sagaQueue:
  uri: ${QUEUE_URI}
  exchangeName: "backend-saga-events"
  exchangeType: "direct" # direct|fanout|topic|x-custom
  userCreatedQueue:
    routingKey: "user-created"
  verifierStatusQueue:
    queueName: "verifier-status-queue"
    routingKey: "verifier-status"
    consumerTag: "backend-saga-social-consumer-%v"
# Post feed config
postFeed:
  maxSize: 1000 # максимальное количество постов в ленте
# Dialogue config
dialogue:
  baseUri: http://backend-dialog-server:8080
# Caches config (use different db)
caches:
  subscribers:
    uri: ${SUBSCRIBERS_CACHE_URI}
    ttl: 60m
  postFeed:
    uri: ${POST_FEED_CACHE_URI}
    ttl: 60m
# Zabbix config
zabbix:
  host: ${ZABBIX_HOST}
  port: ${ZABBIX_PORT}
  period: "10s"
  name: ${ZABBIX_NAME}